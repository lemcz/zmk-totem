//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define Base        0
#define Nav         1
#define Num         2
#define Sym         3
#define Acc         4
#define Fun         5

/* Key Position Groups */
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25    // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31    // right-hand keys
#define THUMBS 32 33 34 35 36 37                             // thumb keys

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <150>;
};

&lt {
    tapping-term-ms = <180>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    cond_layers {
        compatible = "zmk,conditional-layers";
        tri {
            if-layers = <Num Nav>;
            then-layer = <Fun>;
        };
    };

    behaviors {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };

        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <210>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };

        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <210>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
    };

    combos {
        compatible = "zmk,combos";
        // GLOBAL Combos

        tab_combo {
          timeout-ms = <50>;
          key-positions = <1 11>;
          bindings = <&kp TAB>;
        };

        // Num Combos

        brightness_down_combo {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&kp C_BRI_DEC>;
            layers = <Num>;
        };

        brightness_up_combo {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp C_BRI_INC>;
            layers = <Num>;
        };

        // Base Combos

        enter_combo {
          timeout-ms = <50>;
          key-positions = <33 34>;
          bindings = <&kp ENTER>;
          layers = <Base>;
        };

        double_quote_combo {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LS(QUOT)>;
            layers = <Base>;
        };

        less_than_combo {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp LT>;
            layers = <Base>;
        };

        bslash_combo {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp BSLH>;
            layers = <Base>;
        };

        single_quote_combo {
            timeout-ms = <50>;
            key-positions = <16 27>;
            bindings = <&kp QUOT>;
            layers = <Base>;
        };

        greater_than_combo {
            timeout-ms = <50>;
            key-positions = <17 28>;
            bindings = <&kp GT>;
            layers = <Base>;
        };

        ques_mark_combo {
            timeout-ms = <50>;
            key-positions = <18 29>;
            bindings = <&kp LS(FSLH)>;
            layers = <Base>;
        };

        colon_combo {
          timeout-ms = <50>;
          key-positions = <19 30>;
          bindings = <&kp COLON>;
          layers = <Base>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
                     &kp Q       &kp W       &kp E        &kp R        &kp T         &kp Y            &kp U         &kp I        &kp O       &kp P
                     &mtl LGUI A &mtl LALT S &mtl LSHFT D &mtl LCTRL F &kp G         &kp H            &mtr LCTRL J  &mtr LSHFT K &mtr LALT L &mtr LGUI SEMI
        &kp ESC      &kp Z       &kp X       &kp C        &kp V        &kp B         &kp N            &kp M         &kp COMMA    &kp DOT     &kp FSLH       &mt GRAVE QUOT
                                             &mo Num      &mo Sym      &shifty       &lt Nav SPACE    &mo Acc      &mo Num
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
                  &kp LG(Q)  &kp LG(W)  &trans      &trans          &kp LG(T)    &none        &kp PG_UP    &kp UARW   &kp PG_DN   &kp DEL
                  &kp LGUI   &kp LALT   &kp LSHFT   &kp LCTRL       &trans       &kp HOME     &kp LARW     &kp DARW   &kp RARW    &kp BKSP
        &trans    &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)       &trans       &kp END      &kp TAB      &none      &none       &kp ENTER   &kp GRAVE
                                        &trans      &trans          &trans       &trans       &trans       &none
            >;
        };

        Num {
            label = "Num";
            bindings = <
                     &trans   &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &kp C_PREV       &kp FSLH   &kp N7   &kp N8   &kp N9     &trans
                     &kp LGUI &kp LALT   &kp LSHFT    &kp LCTRL     &kp C_NEXT       &kp EQUAL  &kp N4   &kp N5   &kp N6     &none
        &bt BT_CLR   &trans   &trans     &trans       &trans        &kp C_PLAY_PAUSE &kp N0     &kp N1   &kp N2   &kp N3     &kp KP_ENTER  &none
                                         &trans       &trans        &trans           &trans     &trans  &trans
            >;
        };

        Sym {
            label = "Sym";
            bindings = <
                  &trans    &trans     &trans      &trans    &trans         &kp CARET     &kp AMPS   &kp ASTRK     &kp LPAR      &kp RPAR
                  &kp EXCL  &kp AT     &kp HASH    &kp DLLR  &kp PRCNT      &kp EQUAL     &kp MINUS  &kp LBRC      &kp LBKT      &kp BSLH
        &none     &trans    &trans     &trans      &trans    &trans         &kp UNDER     &kp PLUS   &kp RBRC      &kp RBKT      &kp PIPE     &kp GRAVE
                                       &none       &trans    &trans         &trans        &trans     &none
            >;
        };

        Acc {
            label = "Acc";
            bindings = <
                   &trans       &trans        &kp RA(E)   &trans    &trans      &trans     &kp GRAVE     &trans        &kp RA(O)   &trans
                   &kp RA(A)    &kp RA(S)     &trans      &trans    &trans      &kp GRAVE  &kp QUOT      &kp LS(QUOT)  &kp RA(L)   &trans
        &trans     &kp RA(Z)    &kp RA(X)     &kp RA(C)   &trans    &trans      &kp RA(N)  &kp LS(QUOT)  &trans        &trans      &trans     &trans
                                              &none       &trans    &trans      &trans     &trans        &trans
            >;
        };

        Fun {
            label = "Fun";
            bindings = <
                  &trans    &trans     &trans      &trans     &trans         &trans    &kp F7     &kp F8     &kp F9     &kp F12
                  &kp LGUI  &kp LALT   &kp LSHFT   &kp LCTRL  &trans         &trans    &kp F4     &kp F5     &kp F6     &kp F11
        &kp CAPS  &trans    &trans     &trans      &trans     &trans         &trans    &kp F1     &kp F2     &kp F3     &kp F10     &kp INS
                                           &none   &trans     &trans         &trans    &trans     &none
            >;
        };
    };
};
